

import bcrypt
import sqlite3
from db.tables import WRITE_USER_TABLE, WRITE_FILE_TABLE, WRITE_TABLE_LOGS
import datetime
import pathlib
# ----------------- database functions ---------------------

def initializeTables():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(WRITE_USER_TABLE)
    cursor.execute(WRITE_FILE_TABLE)
    cursor.execute(WRITE_TABLE_LOGS)
    conn.commit()


# ----------------- utility functions -----------------------


def hash_password(password):
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode(), salt)
    return hashed_password.decode()

def check_password(password, hashed_password):
    return bcrypt.checkpw(password.encode(), hashed_password.encode())

def create_acc( username, password):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    # Hash the password using bcrypt
    hashed_password = hash_password(password)

    # Insert the new user into the database
    cursor.execute("""
        INSERT INTO users (username, password)
        VALUES (?, ?)
    """, (username, hashed_password))
    conn.commit()

def login_acc(username, password):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()

    # Retrieve the hashed password from the database
    c.execute("SELECT password FROM users WHERE username=?", (username,))
    hashed_password = c.fetchone()

    # If the user exists, compare the entered password with the hashed password
    if hashed_password:
        hashed_password = hashed_password[0]
        if check_password(password, hashed_password):
            return True
        else:
            return False
    else:
        return False


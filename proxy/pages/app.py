import os
import streamlit as st
from file_checker import checkFile, extract_info
import pandas as pd
import sqlite3
import datetime
import pathlib

# ------------------------- utility functions ---------------------------

def getUserId(username):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()

    c.execute("SELECT id FROM users WHERE username = ?", (username,))
    result = c.fetchone()

    if result:
            user_id = result[0]
            return user_id
    else:
        return None

def saveFileStatus(state, username, filename):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()

    # Get the user ID using the provided username
    user_id = getUserId(username)

    if user_id:
        # Insert data into the logs table
        today_date = datetime.date.today()

        c.execute('''
            INSERT INTO logs (user_id, state, date)
            VALUES (?, ?, ?)
        ''', (user_id, state, today_date))
        conn.commit()
        if not state:
            url = path_to_url(f'safe_files/{filename}')
            saveFile(user_id, filename, url)
        print("Data inserted successfully!")
    else:
        print(f"No user found with username: {username}")

    conn.close()


def saveFile(user_id, filename, url):
    try:
        conn = sqlite3.connect('database.db')
        c = conn.cursor()

        # Insert data into the files table
        c.execute('''
            INSERT INTO files (user_id, file_name, file_url)
            VALUES (?, ?, ?)
        ''', (user_id, filename, url))
        conn.commit()
        print("File saved successfully!")

    except sqlite3.Error as e:
        print(f"Error saving file: {e}")
    finally:
        conn.close()

def path_to_url(file_path):
    path_obj = pathlib.Path(file_path).resolve()
    return path_obj.as_uri()

# ------------------------- end -----------------------------------------




# page configs
st.set_page_config(page_title="File Upload")
index_page="index.py"
stats_page="pages/stats.py"
if 'username' not in st.session_state:
    st.switch_page(index_page)

st.markdown("""
<style>
[data-testid="stSidebar"] {
    display: none;
}
</style>
""", unsafe_allow_html=True)

col1, col2, col3 = st.columns(3)

with col1:
    st.caption(f"Logged in as: {st.session_state['username']}")
with col3:
    st.page_link(stats_page, label="Stats", icon="ðŸ“ˆ")
    st.write('')


# Title and description
st.title("Malware & Benign Detection: ")

# Ensure the 'safe_files' directory exists
if not os.path.exists('safe_files'):
    os.makedirs('safe_files')  # Create the directory if it doesn't exist

# File uploader
file = st.file_uploader("Upload or Drag your file here:", accept_multiple_files=False)

# Display the feature details after file upload
if file:
    with st.spinner("Extracting features..."):
        # Save the uploaded file temporarily
        temp_file_path = 'tempFile'
        with open(temp_file_path, 'wb') as f:
            f.write(file.getvalue())

        # Extract features
        data = extract_info(temp_file_path)

        # Display the extracted features in a table
        if data:
            st.write("Extracted Features:")
            feature_df = pd.DataFrame(list(data.items()), columns=["Feature", "Value"])
            st.dataframe(feature_df, use_container_width=True)  # Display features in a table

        # Check if the file is legitimate
        legitimate = checkFile(temp_file_path)

        if legitimate:
            # Save the file to 'safe_files'
            safe_file_path = os.path.join("safe_files", file.name)
            with open(safe_file_path, 'wb') as f:
                f.write(file.getvalue())
            saveFileStatus(False, st.session_state['username'], file.name)
            st.success(f"File '{file.name}' is safe and has been uploaded.")

        else:
            saveFileStatus(True,st.session_state['username'], file.name )
            st.error(f"File '{file.name}' might be malware. Upload aborted.")
            st.toast('Upload aborted, virus detected ðŸ˜”')

        # Clean up the temporary file
        os.remove(temp_file_path)